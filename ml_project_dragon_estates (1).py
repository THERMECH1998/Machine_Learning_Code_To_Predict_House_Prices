# -*- coding: utf-8 -*-
"""ML_Project_Dragon_Estates.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JqTaun64Ief1t3EauGazNpqUjMIQ1KqJ
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import StratifiedShuffleSplit
from pandas.plotting import scatter_matrix
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error

#Import Data
housing=pd.read_csv("data.csv")

#Making Correlations
corr_matrix=housing.corr()
corr_matrix['MEDV'].sort_values(ascending=True)

attributes=['RM','ZN','MEDV','LSTAT']
scatter_matrix(housing[attributes],figsize=(12,8))

housing['TAXRM']=housing['TAX']/housing['RM']
housing.head()
housing.shape

housing.describe()

#Missing Attributes
#1) Removing Missing DATAPOINTS
#a=housing.dropna(subset=['RM'])
#a.shape
#2) Drop Column
#a=housing.drop('RM',axis=1)
#a.shape
#3) Fill median
#median = housing['RM'].median()
#housing['RM'].fillna(median)
#housing.shape
#Sklearn_module_to_do_the_above_thing
imputer=SimpleImputer(strategy="median")
imputer.fit(housing)
x=imputer.transform(housing)
x.shape

housing_tr=pd.DataFrame(x,columns=housing.columns)##I'm confused what it does, find it out
housing_tr.shape

#Stratified Sampling
split=StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)
for train_index,test_index in split.split(housing_tr,housing_tr['CHAS']):
  strat_train_set=housing_tr.loc[train_index]
  strat_test_set=housing_tr.loc[test_index]
housing_tr=strat_train_set.copy()
housing_test=strat_test_set.copy()

#feature scaling
#1) Min-Max (normalization)
# (value-min)/(max-min) --> Scikitlearn provides min-max scaler
#2) Standardization
# (value-mean)/std --> Sklearn provides a class called standardScalar for this

#Creating a pipeline
my_pipeline = Pipeline([('imputer',SimpleImputer(strategy='median')),('std_scaler',StandardScaler())])

housing_num_tr=my_pipeline.fit_transform(housing_tr)
housing_num_test=my_pipeline.fit_transform(housing_test)
housing_num_test.shape

#Differentiating Features and Labels
housing_num_tr_features=strat_train_set.drop('MEDV',axis=1)
housing_num_tr_labels=strat_train_set["MEDV"].copy()
housing_num_test_features=strat_test_set.drop('MEDV',axis=1)
housing_num_test_labels=strat_test_set["MEDV"].copy()
housing_num_test_features.shape

#Modelling
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
#model=De()
model=RandomForestRegressor()
model.fit(housing_num_tr_features,housing_num_tr_labels)

some_data_features=housing_num_test_features
some_data_labels=housing_num_test_labels

housing_test_prediction_results=model.predict(some_data_features)
housing_test_prediction_results.shape

print(housing_test_prediction_results)
print(some_data_labels)

rms_of_housing_predictions=mean_squared_error(housing_test_prediction_results,some_data_labels)
rms_of_housing_predictions=np.sqrt(rms_of_housing_predictions)

rms_of_housing_predictions

#Testing_of_Test_Data
housing_num_test_prediction_results=model.predict(housing_num_test_features)
housing_num_test_prediction_results

housing_num_test_labels

from sklearn.model_selection import cross_val_score
scores= cross_val_score(model,housing_num_tr_features,housing_num_tr_labels,scoring="neg_mean_squared_error",cv=10)
rmse_scores=np.sqrt(-scores)
rmse_scores
from sklearn.metrics import mean_absolute_error
mean_error=mean_absolute_error(housing_num_test_prediction_results,housing_num_test_labels)
rmse_scores

total=0
for i in range (0,9):
  total=rmse_scores[i]+total
print('The mean value of rmse_scores:',total/10)
print('The rms error is:',rms_of_housing_predictions)
print('The mean absolute error is:',mean_error)
print('Std.Seviation:',rmse_scores.std())

#Decision_Tree
#The mean value of rmse_scores: 3.7757107497475664
#The rms error is: 4.094771893859913
#The mean absolute error is: 2.9127450980392164
#Std.Seviation: 0.72974731316062

#LinearRegression
#The mean value of rmse_scores: 4.02686602590072
#The rms error is: 3.698928477951847
#The mean absolute error is: 2.854173430501078
#Std.Seviation: 1.2613220257419713

#RandomForestRegressor
#The mean value of rmse_scores: 3.0430138868429246
#The rms error is: 2.8970538161597004
#The mean absolute error is: 2.051421568627451
#Std.Seviation: 0.6547691203059703